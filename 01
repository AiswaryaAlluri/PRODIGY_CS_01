#encryption function
def caesar_encrypt(text, shift):
    encrypted_text = ""
    for char in text:
        if char.isalpha():
          # Shift the alphabetical characters by the specified amount
            shifted_char = chr((ord(char) - 65 + shift) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + shift) % 26 + 97)
            encrypted_text += shifted_char
        else:
          # Non-alphabetical characters remain unchanged
            encrypted_text += char
    return encrypted_text

#Decryption function
def caesar_decrypt(text, shift):
    decrypted_text = ""
    for char in text:
        if char.isalpha():
          # Shift the alphabetical characters back by the specified amount to decrypt
            shifted_char = chr((ord(char) - 65 - shift) % 26 + 65) if char.isupper() else chr((ord(char) - 97 - shift) % 26 + 97)
            decrypted_text += shifted_char
        else:
          # Non-alphabetical characters remain unchanged
            decrypted_text += char
    return decrypted_text

def main():
    while True:
      # Prompts user for action: encrypt, decrypt, or exit
        choice = input("Do you want to encrypt or decrypt? (encrypt/decrypt/exit): ").lower()
        if choice == 'exit':
          # If user chooses to exit, terminate the program by printing thumsup emoji
            print("\U0001f44D")
            break
        elif choice == 'encrypt':
          # If user chooses to encrypt
            message = input("Enter the message: ")
            shift = int(input("Enter the shift value (an integer between 1 and 25): "))
            encrypted_message = caesar_encrypt(message, shift)
            print("Encrypted message:", encrypted_message)
        elif choice == 'decrypt':
          # If user chooses to decrypt
            message = input("Enter the message: ")
            shift = int(input("Enter the shift value (an integer between 1 and 25): "))
            decrypted_message = caesar_decrypt(message, shift)
            print("Decrypted message:", decrypted_message)
        else:
          # If user enters an invalid choice
            print("Invalid choice. Please enter 'encrypt', 'decrypt', or 'exit'.")

if __name__ == "__main__":
    main()
